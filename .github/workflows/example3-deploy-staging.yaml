on:
  push:
    branches:
      - "*"
    paths:
      - "inf/python-package-index/**/*"
      - "inf/modules/**/*"
      - ".github/workflows/example3-deploy-staging.yaml"
    tags:
      - "python-package-index@v*-staging"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  deploy-terraform-configurations-to-python-package-index-stack-staging:
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0
          terraform_wrapper: false
      - name: Set up aws cli
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          sudo apt install unzip
          unzip awscliv2.zip
          sudo ./aws/install
          aws --version
      - name: Add profile credentials to  ~/.aws/credntials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} --profile identity
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} --profile identity
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} --profile odira
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} --profile odira
      - name: Add config for profiles in ~/.aws/config
        run: |
          aws configure set region us-east-2 --profile identity
          aws configure set output json --profile identity
          aws configure set region us-east-2 --profile odira
          aws configure set output json --profile odira
          aws configure set region us-east-2 --profile terraform-state
          aws configure set role_arn "arn:aws:iam::592830654455:role/terraform-deployers" --profile terraform-state
          aws configure set source_profile identity --profile terraform-state
          aws configure set region us-east-2 --profile robotics_robot_stack_dev-admin
          aws configure set role_arn arn:aws:iam::699250785121:role/administrator --profile robotics_robot_stack_dev-admin
          aws configure set source_profile identity --profile robotics_robot_stack_dev-admin
          aws configure set region us-east-2 --profile robotics_robot_stack_prod-admin
          aws configure set role_arn arn:aws:iam::879285218407:role/administrator --profile robotics_robot_stack_prod-admin
          aws configure set source_profile identity --profile robotics_robot_stack_prod-admin
          aws configure set region us-east-2 --profile odira
          aws configure set role_arn arn:aws:iam::402888776145:role/administrator --profile odira
          aws configure set source_profile identity --profile odira
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: inf/python-package-index
        shell: bash
      - name: Terraform Workspace
        id: workspace-setup
        run: terraform workspace select dev
        working-directory: inf/python-package-index
        shell: bash
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: inf/python-package-index
        shell: bash
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: inf/python-package-index
        shell: bash
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -input=false -var-file=ppi.tfvars -no-color -out tf_plan_staging
        working-directory: inf/python-package-index
        shell: bash
      - name: Terraform Show
        id: show
        run: |
          terraform show -no-color tf_plan_staging 2>&1 | tee /tmp/tf_plan_staging.txt
        working-directory: inf/python-package-index
        shell: bash
      - name: Write Plan to Pull-Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ inputs.GITHUB_TOKEN }}
          script: |
            const fs = require("fs");
            const plan = fs.readFileSync("/tmp/tf_plan_staging.txt", "utf8");
            const maxGitHubBodyCharacters = 65536;
            function chunkSubstr(str, size) {
              const numChunks = Math.ceil(str.length / size)
              const chunks = new Array(numChunks)
              for (let i = 0, o = 0; i < numChunks; ++1, o += size) {
                chunks[i] = str.substr(o, size)
              }
              return chunks
            }
            var plans = chunkSubstr(plan, maxGitHubBodyCharacters);
            for (let i = 0; i < plans.length; i++) {
              const output = `### ${{ inputs.plan-title }} Part # ${i + 1}
              #### Terraform Format: \`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization: \`${{ steps.init.outcome }}\`
              #### Terraform Plan: \`${{ steps.plan.outcome }}\`
              <details><summary>Show Plan</summary>
              \`\`\`\n
              ${plans[i]}
              \`\`\`
              </details>
              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working-directory }}\`, Workflow: \`${{ github.workflow }}\`*`;
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
      - name: Terraform Apply
        if: startsWith(github.ref, 'refs/tags/python-package-index@') && endsWith(github.ref, '-staging')
        run: |
          terraform apply -input=false tf_plan_staging
        working-directory: inf/python-package-index
        shell: bash
        continue-on-error: true